"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[102],{4975:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return u},metadata:function(){return i},toc:function(){return d}});var r=n(7462),o=n(3366),l=(n(7294),n(3905)),a=["components"],u={},s="\u5b9e\u7528Crate\u5305\uff1asyn\u548cquote",i={unversionedId:"rust\u7b14\u8bb0/\u9644\u5f55:crate\u5305-quote",id:"rust\u7b14\u8bb0/\u9644\u5f55:crate\u5305-quote",isDocsHomePage:!1,title:"\u5b9e\u7528Crate\u5305\uff1asyn\u548cquote",description:"\u4ecb\u7ecd",source:"@site/docs/rust\u7b14\u8bb0/\u9644\u5f55:crate\u5305-quote.md",sourceDirName:"rust\u7b14\u8bb0",slug:"/rust\u7b14\u8bb0/\u9644\u5f55:crate\u5305-quote",permalink:"/docs/rust\u7b14\u8bb0/\u9644\u5f55:crate\u5305-quote",editUrl:"https://github.com/7213/my-favorite-code-segment/tree/main/docs/docs/rust\u7b14\u8bb0/\u9644\u5f55:crate\u5305-quote.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8868\u8fbe\u5f0f",permalink:"/docs/rust\u7b14\u8bb0/\u8868\u8fbe\u5f0f"}},d=[{value:"\u4ecb\u7ecd",id:"\u4ecb\u7ecd",children:[],level:2},{value:"\u7528\u6cd5",id:"\u7528\u6cd5",children:[{value:"syn\u3001quote \u7684\u5927\u81f4\u4f7f\u7528\u6846\u67b6",id:"synquote-\u7684\u5927\u81f4\u4f7f\u7528\u6846\u67b6",children:[],level:3},{value:"syn\u91cd\u8981\u7684\u7ed3\u6784\u89e3\u6790",id:"syn\u91cd\u8981\u7684\u7ed3\u6784\u89e3\u6790",children:[{value:"AST Node\u8282\u70b9\u7c7b\u578b",id:"ast-node\u8282\u70b9\u7c7b\u578b",children:[],level:4},{value:"\u6a21\u5f0f\u5728quote\u7684\u5e94\u7528",id:"\u6a21\u5f0f\u5728quote\u7684\u5e94\u7528",children:[],level:4}],level:3}],level:2}],m={toc:d};function c(e){var t=e.components,n=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u5b9e\u7528crate\u5305syn\u548cquote"},"\u5b9e\u7528Crate\u5305\uff1asyn\u548cquote"),(0,l.kt)("h2",{id:"\u4ecb\u7ecd"},"\u4ecb\u7ecd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"syn\u7684\u4f5c\u7528\u662f\u5c06Rust\u6e90\u7801\u5bf9\u5e94\u7684Tokens\u6d41\u89e3\u6790\u4e3a\u8bed\u6cd5\u6811\uff0cToken\u662f\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u8bcd\u6cd5\u5355\u5143"),(0,l.kt)("li",{parentName:"ul"},"quote\u7684\u4f5c\u7528\u548csyn\u76f8\u53cd\uff0c\u5b83\u4e3b\u8981\u5c06\u8bed\u6cd5\u6811\u8f6c\u6362\u4e3aRust\u6e90\u7801\u5bf9\u5e94\u7684Tokens\u6d41\uff0c\u4ece\u800c\u5728\u7f16\u8bd1\u9636\u6bb5\u4fee\u6539\u539f\u6765\u7684\u6e90\u7801\uff0c\u5b9e\u73b0\u4e86Rust\u7684",(0,l.kt)("em",{parentName:"li"},"\u5143\u7f16\u7a0b"))),(0,l.kt)("p",null,"\u56e0\u4e3a\u4ee5\u4e0a\u7684\u4f5c\u7528syn\u5e38\u88ab\u7528\u6765\u89e3\u6790\u539f\u6709\u6e90\u7801\uff0cquote\u88ab\u7528\u6765\u8f93\u51fa\u76ee\u6807\u6e90\u7801\uff0c\u8c8c\u4f3c\u73b0\u5728\u51e0\u4e4e\u4e5f\u53ea\u88ab\u6765\u5b9e\u73b0\u5404\u79cd\u5b8f\u4e0a\u3002"),(0,l.kt)("h2",{id:"\u7528\u6cd5"},"\u7528\u6cd5"),(0,l.kt)("p",null,"\u9996\u5148\u6211\u4eec\u642d\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8fc7\u7a0b\u5b8f\u7684\u5de5\u7a0b\uff0c\u548c\u4e00\u4e2a\u4f7f\u7528\u8fc7\u7a0b\u5b8f\u7684\u5de5\u7a0b"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5b9a\u4e49\u8fc7\u7a0b\u5b8f\u5de5\u7a0b ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/7213/my-favorite-code-segment/tree/main/rust-demo/rust-note/custom-derive"},"custom-derive")," PS\uff1a\u8fc7\u7a0b\u5b8f\u548c\u4f7f\u7528\u6b64\u5b8f\u7684\u5de5\u7a0b\u5fc5\u987b\u5206\u5f00"),(0,l.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u8fc7\u7a0b\u5b8f ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/7213/my-favorite-code-segment/blob/main/rust-demo/rust-note/src/syn_quote_example.rs"},"syn_quote_example"))),(0,l.kt)("h3",{id:"synquote-\u7684\u5927\u81f4\u4f7f\u7528\u6846\u67b6"},"syn\u3001quote \u7684\u5927\u81f4\u4f7f\u7528\u6846\u67b6"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"1.\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"parse_macro_input!")," \u5c06\u7684\u8fc7\u7a0b\u5b8f\u4f5c\u7528\u7684\u5730\u65b9\u7684\u6e90\u7801\u7684TokenStream\u8f6c\u4e3a\u8bed\u6cd5\u6811"),(0,l.kt)("li",{parentName:"ul"},"2.\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"Data structures")," \u5305\u542b\u4e86Rust\u5bf9\u5e94\u7684\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u7684\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u7528\u5b83\u6765\u65b9\u4fbf\u7684\u89e3\u6784\u51fa\u4f60\u60f3\u8981\u7684\u8bed\u6cd5\u6811\u8282\u70b9"),(0,l.kt)("li",{parentName:"ul"},"3.\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"quote!")," \u5728\u8bed\u6cd5\u6811\u4e0a\u6269\u5c55\u4f60\u60f3\u8981\u7684\u884c\u4e3a\uff0c\u5e76\u5c06\u5176\u518d\u8f6c\u6362\u4e3aTokenStream\u7ed9Rust\u7684\u7f16\u8bd1\u6d41\u7a0b")),(0,l.kt)("p",null,"\u6211\u4eec\u5148\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u7ec3\u7ec3\u624b\uff0c\u521b\u5efa\u4e00\u4e2a\u8fc7\u7a0b\u5b8f",(0,l.kt)("inlineCode",{parentName:"p"},"hello_macro"),"\uff0c\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\u6dfb\u52a0hello_world\u65b9\u6cd5"),(0,l.kt)("p",null,"\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"hello_macro"),"\u5b8f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'extern crate custom_derive;\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn test_sync() {\n        use custom_derive::hello_macro;\n\n        #[derive(hello_macro)]\n        pub(crate) struct MySelf {\n            name: String,\n            age: u8,\n        }\n\n        let me = MySelf {\n            name: String::from("sz"),\n            age: 18,\n        };\n        me.say_hello();\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"hello_macro"),"\u5b8f\u7684\u5199\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[proc_macro_derive(hello_macro)]\npub fn hello_macro(input: TokenStream) -> TokenStream {\n    \n    // \u5bf9\u5e94\u6b65\u9aa41.\u5c06TokenStream\u8f6c\u6362\u6210AST\n    let ast = parse_macro_input!(input as DeriveInput);\n\n    // \u5bf9\u5e94\u6b65\u9aa42.\u4eceAST Node\u4e0a\u63d0\u53d6\u4fe1\u606f\uff0c\u83b7\u53d6\u7ed3\u6784\u4f53\u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u91cc\u662fMySelf\n    let ident = ast.ident;\n\n    // \u5bf9\u5e94\u6b65\u9aa43.\u6269\u5c55\u6e90\u7801\u884c\u4e3a\n    let expanded = quote! {\n        trait Hello {\n            fn say_hello(&self) {\n                println!("{}", "hello_word2")\n            }\n        }\n        // \u4e3a\u7ed3\u6784\u4f53#ident\u5b9e\u73b0Hello tarit\n        impl Hello for #ident {};\n    };\n    expanded.into()\n}\n')),(0,l.kt)("p",null,"// todo"),(0,l.kt)("h3",{id:"syn\u91cd\u8981\u7684\u7ed3\u6784\u89e3\u6790"},"syn\u91cd\u8981\u7684\u7ed3\u6784\u89e3\u6790"),(0,l.kt)("h4",{id:"ast-node\u8282\u70b9\u7c7b\u578b"},"AST Node\u8282\u70b9\u7c7b\u578b"),(0,l.kt)("h4",{id:"\u6a21\u5f0f\u5728quote\u7684\u5e94\u7528"},"\u6a21\u5f0f\u5728quote\u7684\u5e94\u7528"))}c.isMDXComponent=!0}}]);